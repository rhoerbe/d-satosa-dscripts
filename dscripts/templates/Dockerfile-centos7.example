FROM centos:centos7
LABEL maintainer="Rainer HÃ¶rbe <r2h2@hoerbe.at>" \
      version="0.0.0" \
      didi_dir="https://raw.githubusercontent.com/repoowner/project/master/didi" \
      # by default, remove all capabilities. You may need to add particular ones, such as:
      #   --cap-add=setuid --cap-add=setgid --cap-add=chown --cap-add=net_bind_service
      capabilities='--cap-drop=all'


HEALTHCHECK --interval=5m --timeout=5s CMD curl -f http://localhost:8080/ || exit 1

# allow build behind firewall
ARG HTTPS_PROXY=''

# useful tools
RUN yum -y install bind-utils curl iproute lsof mlocate net-tools openssl telnet unzip wget which \
 && && yum clean all

# more dev tools than just yum -y install gcc gcc-c++
RUN yum -y groupinstall "Development Tools" --setopt=group_package_types=mandatory,default,optional \
 && yum clean all


# EPEL
RUN yum -y install epel-release \
 && yum clean allyum

# GNOME
RUN yum -y groups install "GNOME Desktop" \
 && yum clean all

# Python34: EPEL does contain pyhton 3.4, but it fails to install PIP -> extra download
RUN yum -y install python34-devel \
 && curl https://bootstrap.pypa.io/get-pip.py | python3.4 \
 && yum clean all
# PYTHON3="/usr/bin/python3.4" PIP="/usr/bin/python3.4 -m pip"

# Install Python3 interpreter
# while the SCL version of python 3.4 has the advantage of redhat's blessing, it is more
# difficult to handle because it requires `scl enable`. For remote debugging with pycharm
# the EPEL or IUS versions are preferred. EPEL does not have tkinter.
# SCL version
    RUN yum -y install centos-release-scl \
     && yum -y install rh-python34 rh-python34-python-tkinter rh-python34-python-pip \
 && yum clean all
    RUN source /opt/rh/rh-python34/enable \
     && echo "source /opt/rh/rh-python34/enable" > /etc/profile.d/setpython \
     && echo "export PYTHON=python" >> /etc/profile.d/setpython
    ENV PIP3='source /opt/rh/rh-python34/enable && /opt/rh/rh-python34/root/usr/bin/pip'
    ENV PYTHON3='scl enable rh-python34 -- python'
# EPEL: 
    #RUN yum -y install python34-devel \
    # && curl https://bootstrap.pypa.io/get-pip.py | python3.4 \
    # && yum clean all
    #ENV PYTHON='python3.4'
    #ENV PIP='pip3.4'
    #RUN echo "export PYTHON=$PYTHON" >> /etc/profile
# IUS (both 3.4 and 3.5 available):
    #RUN yum -y install https://centos7.iuscommunity.org/ius-release.rpm \
    # && yum -y install python35u python35u-setuptools python35u-devel python35u-pip python35u-tkinter \
    # && yum clean all
    #ENV PYTHON3='python3.5'
    #ENV PIP='pip3.5'
    #RUN echo "export PYTHON=$PYTHON" >> /etc/profile

RUN eval "$PIP3 install gitdb"
#clone signxml ..
RUN cd signxml && $PYTHON setup.py install && cd ..


# OpenJDK
#RUN yum -y install java-1.8.0-openjdk.x86_64  # JRE only
RUN yum -y install java-1.8.0-openjdk-devel.x86_64 \
 && yum clean all
ENV JAVA_HOME=/etc/alternatives/java_sdk_1.8.0

# Python Javabridge
RUN python3.4 -m pip install numpy \
 && python3.4 -m pip install javabridge

# Pyjnius
RUN cd pyjnius && python3.4 setup.py install && cd .. \
 && cd json2html && python3.4 setup.py install && cd ..
# install pyjnius unittests - requires virtualenv to get right python
#RUN cd pyjnius && yum -y install ant && make

# More python libs
RUN yum -y install libffi-devel libxml2 libxslt-devel libxml2-devel openssl-devel \
 && python3.4 -m pip install cffi cython future gitdb GitPython pyOpenSSL pytz requests \
 && yum clean all

# python virtual env (otherwise fails to find libxml/xmlversion.h
RUN python3.4 -m pip install virtualenv \
 && mkdir /opt/virtualenv && cd /opt/virtualenv \
 && virtualenv PYTHON4 --python python3.4 --system-site-packages \
 && source PYTHON4/bin/activate

# Smart Card support
# Need dbus running for USB interface -> https://github.com/CentOS/sig-cloud-instance-images/issues/22
ENV container docker
RUN yum -y swap -- remove systemd-container systemd-container-libs -- install systemd systemd-libs \
 && yum -y install opensc pcsc-lite usbutils \
 && yum clean all
# install MOCCA (+Jaba Webstart, pcsc)

RUN yum -y install icedtea-web pcsc-lite usbutils \
 && curl -O http://webstart.buergerkarte.at/mocca/webstart/mocca.jnlp \
 && yum clean all

# Application will run as a non-root user/group that must map to the docker host
ARG USERNAME=user
ARG UID=3430xx
RUN groupadd -g $UID $USERNAME \
 && adduser -g $UID -u $UID $USERNAME \
 && mkdir -p /opt && chmod 750 /opt

COPY install/sample_data /opt/sample_data
COPY install/scripts/*.sh /
RUN chmod +x /*.sh \
 && chmod -R 755 /opt

# For development/debugging - map port in config and start sshd with /start_sshd.sh
#RUN yum -y install openssh-server \
# && yum clean all \
# && echo changeit | passwd -f --stdin $USERNAME \
# && echo changeit | passwd -f --stdin root \
# && echo 'GSSAPIAuthentication no' >> /etc/ssh/sshd_config \
# && echo 'useDNS no' >> /etc/ssh/sshd_config \
# && rm -f /etc/ssh/ssh_host_*_key   # generate con first container start, not in image
#VOLUME /etc/sshd
#EXPOSE 2022

RUN mkdir -p /etc/sudoers.d /etc/profile.d
COPY install/sudoers.d/* /etc/sudoers.d/
COPY install/profile.d/* /etc/profile.d/

USER $USERNAME
CMD ["/start.sh"]

